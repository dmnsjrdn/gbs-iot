step 1: Run this in SQL Editor, enable http

create extension if not exists http;

------

step 2: Create resend-email on Edge Function

const RESEND_API_KEY = Deno.env.get('RESEND_API_KEY');
const handler = async (request)=>{
  const { to, subject, html } = await request.json();
  const toList = typeof to === 'string' ? to.split(',').map((email)=>email.trim()) : Array.isArray(to) ? to : [
    to
  ];
  const response = await fetch('https://api.resend.com/emails', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${RESEND_API_KEY}`
    },
    body: JSON.stringify({
      from: "GBS-Iot Bin Alert <alerts@tgmxpress.com>",
      to: toList,
      subject,
      html
    })
  });
  const data = await response.json();
  return new Response(JSON.stringify(data), {
    status: response.status,
    headers: {
      'Content-Type': 'application/json'
    }
  });
};
Deno.serve(handler);

------

step 3: Run this in SQL Editor, create a function

create or replace function call_edge_on_bin_log_insert()
returns trigger as $$
declare
  response json;
  recipients text;
  payload text;
begin
  -- Only send email if the value exceeds threshold
  if NEW.value > 79 then
    -- Get the latest email_recipients
    select email_recipients into recipients
    from app_configuration
    order by modified_at desc
    limit 1;

    -- Build the raw JSON payload string (text)
    payload := 
      '{ "to": "' || recipients || '", "subject": "Bin Alert!", "html": "' ||
      '<div style=\"font-family: Arial, sans-serif; background-color: #f4f4f4; padding: 20px;\">' ||
        '<div style=\"max-width: 600px; background-color: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\">' ||
          '<div style=\"font-size: 20px; font-weight: bold; color: #333; margin-bottom: 16px;\">ðŸš¨ Bin Level Alert</div>' ||
          '<div style=\"background-color: #ffe5e5; padding: 15px; border-left: 5px solid #d9534f; margin-bottom: 20px; border-radius: 5px;\">' ||
            '<p>Bin <strong>' || NEW.bin || '</strong> reported a high fill level of <strong>' || NEW.value || '%</strong>.</p>' ||
            '<p>Timestamp:<br><strong>' || NEW.created_at || '</strong></p>' ||
          '</div>' ||
          '<p>Please schedule a pickup or take necessary action.</p>' ||
          '<div style=\"font-size: 12px; color: #888; margin-top: 30px; text-align: center;\">' ||
            'This is an automated notification from GBS-IoT Bin Monitoring System.' ||
          '</div>' ||
        '</div>' ||
      '</div>' ||
      '" }';


    -- uncomment this if you use the step 6
    -- Log the payload to debug table
    /*
    insert into debug_log_table(log_time, message)
    values (now(), payload);

    -- Call Edge Function
    select * into response from http_post(
      'https://vrqncbztporodhozcfcg.supabase.co/functions/v1/resend-email',
      payload,
      'application/json'
    );

    -- uncomment this if you use the step 6
    -- logging
    /*
    insert into debug_log_table(log_time, message)
    values (now(), 'Edge Function response: ' || response::text);
    */

    -- Optional: log response
    raise notice 'Email sent. Response: %', response;
  end if;

  return NEW;
end;
$$ language plpgsql;

------

step 4: Run this in SQL Editor, create a trigger

create or replace trigger trigger_bin_log_email
after insert on bin_log
for each row
execute procedure call_edge_on_bin_log_insert();

------

step 5: Unit test

insert into bin_log (bin, value) values ('Dustbin2', 34);

select * from bin_log order by created_at desc;


!---START: Manual Testing The Function---!
select * from http_post(
'https://vrqncbztporodhozcfcg.supabase.co/functions/v1/resend-email',
'{ "to": "dmnsjrdn@gmail.com", "subject": "Bin Alert!", "html": "Test Postman" }',
'application/json'
);
!---END: Manual Testing The Function---!


step 6 (optional): create a logging table, we used this on the function call_edge_on_bin_log_insert to log data

create table debug_log_table (
  id serial primary key,
  log_time timestamptz default now(),
  message text
);

select * from debug_log_table order by log_time desc;
